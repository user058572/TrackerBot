import telebot
import sqlite3
from telebot import types
from Dicts import lessons_dict, mentors_dict, participation_stage_dict


def main():
    token = '5846254841:AAE9hO3V9sbtkOYZeODrCdoYKvVB1FscC1I'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    bot = telebot.TeleBot(token)

    db = sqlite3.connect("Data_Bases//Users.db",
                         check_same_thread=False)  # –°–æ–∑–¥–∞—ë–º –±–¥ —Å id —á–∞—Ç–æ–≤ –∏ –∫–∞–∫–∏–µ –∏–º–µ–Ω–∞ –∫ –Ω–∏–º –ø—Ä–∏–≤—è–∑–∞–Ω—ã
    cursor = db.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS user
                        (chat_id BIGINT,
                        user_name TEXT,
                        olympiad_index INT)
                    """)  # ID —á–∞—Ç–∞ –∏ –∫–∞–∫–æ–µ –∏–º—è –µ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç

    db_olympiad = sqlite3.connect("Data_Bases//RsOS.db",
                                  check_same_thread=False)  # –°–æ–∑–¥–∞—ë–º –±–¥ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    # –æ–ª–∏–º–ø–∏–∞–¥–æ–π, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–∞–ø–∏—Å–∞–ª, –ø—Ä–µ–¥–º–µ—Ç–æ–º –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–∏—Å–∞–ª –æ–ª–∏–º–ø–∏–∞–¥—É, —ç—Ç–∞–ø –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
    cursor_olymp = db_olympiad.cursor()
    cursor_olymp.execute("""CREATE TABLE IF NOT EXISTS olympiad
                            (user_name TEXT,
                            olympiad TEXT,
                            lesson TEXT,
                            participation_stage TEXT,
                            mentor TEXT)
                        """)

    olympiad_lst = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥
    olympiad_dict = {}  # –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –æ–ª–∏–º–ø–∏–∞–¥—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã
    c = 0

    with open('–¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫–∏//–†—Å–û–® –æ–ª–∏–º–ø–∏–∞–¥—ã.txt', 'r', encoding='utf-8') as file:
        olympiad = file.readlines()
        for i in olympiad:
            i = i.split(' - ')
            if i[0] not in olympiad_dict.keys():
                olympiad_dict[i[0]] = [i[1]]
            else:
                olympiad_dict[i[0]].append([i[1]])

    with open('–¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫–∏//–†—Å–û–®.txt', 'r', encoding='utf-8') as file:
        olympiad = file.readlines()
        string = ''
        for i in olympiad:
            if c <= 15:
                string += i + '\n'
                c += 1
            else:
                olympiad_lst.append(string)
                string, c = i + '\n', 0
        olympiad_lst.append(string)

    @bot.message_handler(commands=['start'])  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É start
    def start_message(message):
        cursor.execute(f"SELECT chat_id FROM user WHERE chat_id = '{message.chat.id}'")
        # –ò—â–µ–º id —á–∞—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–º –Ω–∞–ø–∏—Å–∞–ª–∏

        if cursor.fetchone() is None:  # –ï—Å–ª–∏ —Ç–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞–º –Ω–µ –ø–∏—Å–∞–ª, —Ç–æ –∫ id –µ–≥–æ —á–∞—Ç–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∏–º—è,
            # –∞ –∑–Ω–∞—á–∏—Ç –º—ã –Ω–µ —Å–º–æ–∂–µ–º –∑–∞–Ω–æ—Å–∏—Ç—å –≤ –±–¥ –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏,
            # —Ç–æ–≥–¥–∞ –Ω–∞–º –Ω–∞–¥–æ —Å–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –∏–º—è –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ id –µ–≥–æ —á–∞—Ç–∞
            bot.send_message(message.chat.id,
                             "‚úå–ü—Ä–∏–≤–µ—Ç\n"
                             "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –†—Å–û–® —Ç—Ä–µ–∫–µ—Ä–∞\n\n"
                             "üîé–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")  # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û")  # –ó–∞–ø—Ä–æ—Å –§–ò–û

        else:  # –ï—Å–ª–∏ id —á–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–¥, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ–≥–¥–∞
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ –∏
            button_message(message)  # –í—ã–≤–æ–¥–∏–º –µ–º—É –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫

    def name(message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fio = message.text  # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        cursor.execute(
            f"SELECT user_name FROM user WHERE user_name = '{fio}'")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∏–º—è –≤ –±–¥
        if cursor.fetchone() is None:  # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ–≥–¥–∞ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            cursor.execute('INSERT INTO user VALUES (?, ?, ?)',
                           (message.chat.id, message.text, 0))
            # –í–ø–∏—Å—ã–≤–∞–µ–º id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –§–ò–û –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª
            db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–¥
            bot.send_message(message.chat.id,
                             "‚úÖ–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")  # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            button_message(message)  # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        else:  # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å, —Ç–æ–≥–¥–∞
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")  # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å –∏
            button_message(message)  # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏

    def button_message(message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)  # –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é

        new_olymp_register = types.KeyboardButton("‚úèÔ∏è–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É")
        my_olymp = types.KeyboardButton("üìÑ–ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã")
        my_place = types.KeyboardButton("üèÜ–ú–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ")
        rename_user = types.KeyboardButton("üîÉ–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è")
        olymp_statick = types.KeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥")
        # new_register = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        markup.add(new_olymp_register, my_olymp, my_place, rename_user, olymp_statick)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        bot.send_message(message.chat.id, '‚ùî–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=markup)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é

    def receive_user_name(message):
        cursor.execute(f"SELECT user_name FROM user WHERE chat_id = '{message.chat.id}'")
        user_name = cursor.fetchone()[0]
        return user_name

    def send_olympiad_list(message, ind):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥
        keyboard = types.InlineKeyboardMarkup()
        next_15 = types.InlineKeyboardButton(text="‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–µ 15", callback_data='next_15')
        past_15 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ü—Ä–æ—à–ª—ã–µ 15", callback_data='past_15')
        pick_olympiad = types.InlineKeyboardButton(text="‚úçÔ∏è–í—ã–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É", callback_data='pick_olympiad')

        # print(ind, len(olympiad_lst) - 1)
        if ind != len(olympiad_lst) - 1 and ind != 0:
            keyboard.add(past_15, next_15)
        elif ind == 0:
            keyboard.add(next_15)
        elif ind == len(olympiad_lst) - 1:
            keyboard.add(past_15)

        keyboard.add(pick_olympiad)
        bot.send_message(message.chat.id, olympiad_lst[ind], reply_markup=keyboard)

    def pick_olymp(message):
        if message.text != '43':
            global name_user
            name_user = receive_user_name(message)
            pick_lesson(message)
        else:
            pass

    def pick_lesson(message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)

        lesson1 = types.InlineKeyboardButton(text="–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è (3)", callback_data='lesson1')
        lesson2 = types.InlineKeyboardButton(text="–ë–∏–æ–ª–æ–≥–∏—è (9)", callback_data='lesson2')
        lesson3 = types.InlineKeyboardButton(text="–ì–µ–Ω–µ—Ç–∏–∫–∞ (2)", callback_data='lesson3')
        lesson4 = types.InlineKeyboardButton(text="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è (9)", callback_data='lesson4')
        lesson5 = types.InlineKeyboardButton(text="–ì–µ–æ–ª–æ–≥–∏—è (2)", callback_data='lesson5')
        lesson6 = types.InlineKeyboardButton(text="–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—É–∫–∏ (3)", callback_data='lesson6')
        lesson7 = types.InlineKeyboardButton(text="–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏ (3)", callback_data='lesson7')
        lesson8 = types.InlineKeyboardButton(text="–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ (5)", callback_data='lesson8')
        lesson9 = types.InlineKeyboardButton(text="–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏(3)", callback_data='lesson9')
        lesson10 = types.InlineKeyboardButton(text="–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (13)", callback_data='lesson10')
        lesson11 = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (14)", callback_data='lesson11')
        lesson12 = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (2)", callback_data='lesson12')
        lesson13 = types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è (17)", callback_data='lesson13')
        lesson14 = types.InlineKeyboardButton(text="–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞ (2)", callback_data='lesson14')
        lesson15 = types.InlineKeyboardButton(text="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (7)", callback_data='lesson15')
        lesson16 = types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (27)", callback_data='lesson16')
        lesson17 = types.InlineKeyboardButton(text="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ (13)", callback_data='lesson17')
        lesson18 = types.InlineKeyboardButton(text="–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è", callback_data='lesson18')
        lesson19 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–æ (7)", callback_data='lesson19')
        lesson20 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è (2)", callback_data='lesson20')
        lesson21 = types.InlineKeyboardButton(text="–†–∏—Å—É–Ω–æ–∫ (2)", callback_data='lesson21')
        lesson22 = types.InlineKeyboardButton(text="–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ (2)", callback_data='lesson22')
        lesson23 = types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (9)", callback_data='lesson23')
        lesson24 = types.InlineKeyboardButton(text="–°–æ—Ü–∏–æ–ª–æ–≥–∏—è (3)", callback_data='lesson24')
        lesson25 = types.InlineKeyboardButton(text="–¢–µ–æ—Ä–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è –º—É–∑—ã–∫–∏ (2)", callback_data='lesson25')
        lesson26 = types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞ (23)", callback_data='lesson26')
        lesson27 = types.InlineKeyboardButton(text="–§–∏–ª–æ–ª–æ–≥–∏—è (7)", callback_data='lesson27')
        lesson28 = types.InlineKeyboardButton(text="–§–∏–ª–æ—Å–æ—Ñ–∏—è (2)", callback_data='lesson28')
        lesson29 = types.InlineKeyboardButton(text="–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å (5)", callback_data='lesson29')
        lesson30 = types.InlineKeyboardButton(text="–•–∏–º–∏—è (16)", callback_data='lesson30')
        lesson31 = types.InlineKeyboardButton(text="–≠–∫–æ–ª–æ–≥–∏—è (2)", callback_data='lesson31')
        lesson32 = types.InlineKeyboardButton(text="–≠–∫–æ–Ω–æ–º–∏–∫–∞ (9)", callback_data='lesson32')

        keyboard.add(
            lesson1, lesson2, lesson3, lesson4, lesson5, lesson6, lesson7, lesson8, lesson9, lesson10, lesson11,
            lesson12, lesson13, lesson14, lesson15, lesson16, lesson17, lesson18, lesson19, lesson20, lesson21,
            lesson22, lesson23, lesson24, lesson25, lesson26, lesson27, lesson28, lesson29, lesson30, lesson31,
            lesson32)

        global olympiad_name
        olympiad_name = olympiad_dict[message.text][0]
        bot.send_message(message.chat.id, f'üìå–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–∏—à–µ—à—å {olympiad_name}', reply_markup=keyboard)

    def pick_participation_stage(message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        passed_registration = types.InlineKeyboardButton(text="‚úèÔ∏è–ü—Ä–æ—à—ë–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                                                         callback_data='passed_registration')
        wrote_qualifying = types.InlineKeyboardButton(text="üìù–ù–∞–ø–∏—Å–∞–ª –æ—Ç–±–æ—Ä–æ—á–Ω—ã–π —ç—Ç–∞–ø", callback_data='wrote_qualifying')
        passed_final = types.InlineKeyboardButton(text="üîù–ü—Ä–æ—à—ë–ª –Ω–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø", callback_data='passed_final')
        took_final = types.InlineKeyboardButton(text="üèÖ–ü—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–∏–Ω–∞–ª–µ(—É—á–∞—Å—Ç–Ω–∏–∫)", callback_data='took_final')
        final_prize_winner = types.InlineKeyboardButton(text="ü•àü•â–ü—Ä–∏–∑—ë—Ä —Ñ–∏–Ω–∞–ª–∞(–¥–∏–ø–ª–æ–º 2 –∏–ª–∏ 3 —Å—Ç–µ–ø–µ–Ω–∏)",
                                                        callback_data='final_prize_winner')
        winner_of_final = types.InlineKeyboardButton(text="ü•á–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ñ–∏–Ω–∞–ª–∞(–¥–∏–ø–ª–æ–º 1 —Å—Ç–µ–ø–µ–Ω–∏)",
                                                     callback_data='winner_of_final')

        keyboard.add(passed_registration, wrote_qualifying, passed_final, took_final, final_prize_winner,
                     winner_of_final)

        global olympiad_name
        bot.send_message(message.chat.id,
                         "‚òëÔ∏è–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—É: " + olympiad_name +
                         '\n üìö–£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–ø —É—á–∞—Å—Ç–∏—è –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', reply_markup=keyboard)

    def pick_mentor(message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)

        mentor1 = types.InlineKeyboardButton(text="üë®‚Äçüè´–ù–∞—Å—Ä—Ç–¥–∏–Ω–æ–≤ –ê–ª–º–∞–∑ –ö–∞—Å–∏–º–æ–≤–∏—á", callback_data='mentor1')
        mentor2 = types.InlineKeyboardButton(text="üë®‚Äçüè´–ö–∞–∑–Ω–∞–±–∞–µ–≤ –ò–ª—å–¥–∞—Ä –ì–∏–ª—å—Ñ–∞–Ω–æ–≤–∏—á", callback_data='mentor2')
        mentor3 = types.InlineKeyboardButton(text="üë©‚Äçüè´–õ–∞—Ç—ã–ø–æ–≤–∞ –ê–ª—å—Ñ–∏—è –§–∞–π–∑—Ä–∞—Ö–º–∞–Ω–æ–≤–Ω–∞", callback_data='mentor3')
        mentor4 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ì–∞–π—Å–∏–Ω–∞ –ì—É–∑–µ–ª—å –§–∞—Ä–∏—Ç–æ–≤–Ω–∞", callback_data='mentor4')
        mentor5 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ê—Ö—É–Ω–æ–≤–∞ –ì—É–ª—å–Ω—É—Ä –Æ—Å—É–ø–æ–≤–Ω–∞", callback_data='mentor5')
        mentor6 = types.InlineKeyboardButton(text="üë®‚Äçüè´–¢—É–∫—Ç–∞—Ä–æ–≤ –§–∞–Ω–∑–∏–ª—å –ò–ª–≥–∞–º–æ–≤–∏—á", callback_data='mentor6')
        mentor7 = types.InlineKeyboardButton(text="üë©‚Äçüè´–°–ø–µ–≤–∞–∫ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", callback_data='mentor7')
        mentor8 = types.InlineKeyboardButton(text="üë©‚Äçüè´–•–∞–º–∏–¥—É–ª–ª–∏–Ω–∞ –ó—É–ª—å—Ñ–∏—è –•—É—Ä–º–∞—Ç–æ–≤–Ω–∞", callback_data='mentor8')
        mentor9 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ë–æ–Ω–¥–∞—Ä–µ–≤–∞ –õ–∏–ª–∏—è –ï–≥–æ—Ä–æ–≤–Ω–∞", callback_data='mentor9')
        mentor10 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ê—Ö–º–µ—Ç–æ–≤–∞ –ì—É–∑–µ–ª—å –†–∞—Ñ–∫–∞—Ç–æ–≤–Ω–∞", callback_data='mentor10')
        mentor11 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ë—ã–≤—à–µ–≤–∞ –ê–ª–µ–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞", callback_data='mentor11')
        mentor12 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ó–∞–π–Ω–µ—Ç–¥–∏–Ω–æ–≤–∞ –ó–∏–ª—Ñ–µ—Ä–∞ –ê—Ä—Å–ª–∞–Ω–±–∏–∫–æ–≤–Ω–∞", callback_data='mentor12')
        mentor13 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ë–∞—Ç–∞–ª–ª–æ–≤–∞ –õ–∏–ª–∏—è –ú–∞—Ä–∞—Ç–æ–≤–Ω–∞", callback_data='mentor13')
        mentor14 = types.InlineKeyboardButton(text="üë©‚Äçüè´–ì—É–±–∞–π–¥—É–ª–ª–∏–Ω–∞ –†–∞–º–∑–∏—è –ò—à–º—É—Ö–∞–º–µ—Ç–æ–≤–Ω–∞", callback_data='mentor14')

        keyboard.add(mentor1, mentor2, mentor3, mentor4, mentor5, mentor6, mentor7, mentor8, mentor9, mentor10,
                     mentor11, mentor12, mentor13, mentor14)
        bot.send_message(message.chat.id, 'üìå–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞', reply_markup=keyboard)

    def correct_chak_olymp(message):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        yes_button = types.InlineKeyboardButton(text="–î–∞", callback_data='correct')
        no_button = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='not_correct')
        keyboard.add(yes_button, no_button)

        global name_user
        global olympiad_name
        global lesson
        global part_stage
        global mentor
        bot.send_message(message.chat.id,
                         f'üë¶–ò–º—è: , {name_user}\n'
                         f'üèÜ–û–ª–∏–º–ø–∏–∞–¥–∞: {olympiad_name}\n'
                         f'üìö–ü—Ä–µ–¥–º–µ—Ç: {lesson}\n'
                         f'üìé–≠—Ç–∞–ø: {part_stage}\n'
                         f"üìå–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {mentor}", reply_markup=keyboard)

    def new_olymp_reg():
        global name_user
        global olympiad_name
        global lesson
        global part_stage
        global mentor
        cursor_olymp.execute('INSERT INTO olympiad VALUES (?, ?, ?, ?, ?)',
                             (name_user, olympiad_name, lesson, part_stage, mentor))
        db_olympiad.commit()

    def user_olympiad_list(message):
        user_name = receive_user_name(message)
        cursor_olymp.execute("SELECT * FROM olympiad")
        massive_big = cursor_olymp.fetchall()
        user_olympiad_string = '<b>üìÑ–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥:</b>\n\n'
        for i in range(len(massive_big)):
            if massive_big[i][0] == user_name:
                user_olympiad_string += f'<b>üéØ–û–ª–∏–º–ø–∏–∞–¥–∞:</b> {massive_big[i][1]}' \
                                        f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {massive_big[i][2]}\n' \
                                        f'<b>–≠—Ç–∞–ø:</b> {massive_big[i][3]}\n' \
                                        f'<b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {massive_big[i][4]}\n\n'

        bot.send_message(message.chat.id, user_olympiad_string, parse_mode="HTML")
        button_message(message)

    def my_rating_place(message):
        user_name = receive_user_name(message)
        cursor_olymp.execute("SELECT * FROM olympiad")
        massive_big = cursor_olymp.fetchall()
        

    @bot.callback_query_handler(func=lambda call: True)
    def answer(call):
        cursor.execute(f"SELECT olympiad_index FROM user WHERE chat_id = '{call.message.chat.id}'")
        olympiad_index = int(cursor.fetchone()[0])

        if call.data == 'next_15':
            bot.delete_message(call.message.chat.id, call.message.id)
            olympiad_index += 1
            cursor.execute(
                f"UPDATE user set olympiad_index = '{olympiad_index}' WHERE chat_id = '{call.message.chat.id}'")
            send_olympiad_list(call.message, olympiad_index)

        elif call.data == 'past_15':
            bot.delete_message(call.message.chat.id, call.message.id)
            olympiad_index -= 1
            cursor.execute(
                f"UPDATE user set olympiad_index = '{olympiad_index}' WHERE chat_id = '{call.message.chat.id}'")
            send_olympiad_list(call.message, olympiad_index)

        elif call.data == 'pick_olympiad':
            msg = bot.send_message(call.message.chat.id, 'üìã–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Ç–µ–±–µ –æ–ª–∏–º–ø–∏–∞–¥—ã')
            bot.register_next_step_handler(msg, pick_olymp)

        elif 'lesson' in call.data:
            global lesson
            lesson = lessons_dict[call.data]
            bot.delete_message(call.message.chat.id, call.message.id)
            pick_participation_stage(call.message)

        elif call.data in (
                'passed_registration', 'wrote_qualifying', 'passed_final', 'took_final', 'final_prize_winner',
                'winner_of_final'):
            global part_stage
            part_stage = participation_stage_dict[call.data]
            bot.delete_message(call.message.chat.id, call.message.id)
            pick_mentor(call.message)

        elif 'mentor' in call.data:
            global mentor
            mentor = mentors_dict[call.data]
            bot.delete_message(call.message.chat.id, call.message.id)
            # try:
            correct_chak_olymp(call.message)
            # except Exception as e:
            # bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')

        elif call.data in ('correct', 'not_correct'):
            if call.data == 'correct':
                try:
                    new_olymp_reg()
                    bot.delete_message(call.message.chat.id, call.message.id)
                    bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—É')
                    button_message(call.message)
                except EOFError:
                    bot.send_message(call.message.chat.id, f'–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')

    @bot.message_handler(content_types=['text'])
    def button_answer(message):
        text = message.text

        cursor.execute(f"SELECT chat_id FROM user WHERE chat_id = '{message.chat.id}'")
        if cursor.fetchone() is None:
            if len(message.text.split()) == 3:
                name(message)
        elif text == '‚úèÔ∏è–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É':
            send_olympiad_list(message, 0)
        elif text == 'üìÑ–ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã':
            user_olympiad_list(message)
        elif text == 'üèÜ–ú–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ':
            my_rating_place(message)
        elif text == 'üîÉ–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è':
            pass
        elif text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥':
            pass
    bot.polling()


if __name__ == '__main__':
    main()
